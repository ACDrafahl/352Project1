
---

# Project 1B - xv6 System Call Extensions  
**Course:** COMS 3520 â€“ Operating Systems  
**Semester:** Spring 2025  
**Name:** Andy Drafahl

## Description  
This project enhances the xv6 operating system by adding **four new system calls**. These system calls demonstrate an understanding of **process management**, **memory translation**, and **trap handling** within xv6-riscv.  

### Added System Calls  
- **getppid()**: Returns the parent process ID of the calling process.
- **getcpids(int *cpids, int max)**: Populates an array with the child process IDs of the calling process.
- **getpaddr(void *vaddr)**: Translates a virtual address to its corresponding physical address.
- **gettraphistory(int *trapcount, int *syscallcount, int *devintcount, int *timerintcount)**: Reports trap statistics for the calling process.

---

## Modified Files  

### Kernel-Side Changes
- `kernel/syscall.h`: Added system call numbers for getppid, getcpids, getpaddr, and gettraphistory.
- `kernel/syscall.c`: Registered new system calls in the `syscalls[]` array and declared handler function prototypes.
- `kernel/sysproc.c`: Implemented the system call handlers:
    - `sys_getppid`
    - `sys_getcpids`
    - `sys_getpaddr`
    - `sys_gettraphistory`
- `kernel/proc.h`: Extended `struct proc` to include trap tracking variables:
    - `trapcount`, `syscallcount`, `devintcount`, `timerintcount`
- `kernel/proc.c`: 
    - Initialized the new trap-related fields in `freeproc()`.
- `kernel/trap.c`: 
    - Updated `usertrap()` to increment the new trap counters.
- `kernel/vm.c`: Used `walk()` and `PTE2PA()` for virtual-to-physical address translation.

---

### User-Side Changes
- `user/user.h`: Declared new system call functions for user programs.
- `user/usys.pl`: Added new system calls to automatically generate assembly stubs.

---